// This code reads an input file and outputs the x,y and z position of events on a 3D
// cylinder with the dimensions of the Hyper-K experiment. 
// The plot also has additional information regarding charge of photoelectrons and
// the timing of events, effectively making it a 5-dimensional plot.
//
// The code is run as $ root -l -x 'OD3Devent.C("OD.root")' where OD.root refers to the
// location of the input file. 
// The input file right now is ("../OD.root")


#include <stdio.h>     
#include <stdlib.h>    


//****************  Creating macro and opening input file  **************************



void OD3DEvtByEvt(char *filename=NULL) {

  gROOT->Reset();
  char* wcsimdirenv;
  wcsimdirenv = getenv ("WCSIMDIR");
  if(wcsimdirenv !=  NULL){
    gSystem->Load("${WCSIMDIR}/libWCSimRoot.so");
    gSystem->Load("${WCSIMDIR}/libWCSimRoot.rootmap");
  }else{
    std::cout << "Can't load WCSim ROOT dictionaries" << std::endl;
  }
  gStyle->SetOptStat(1);

  TFile *f;
  char fTest[128];
  if (filename==NULL){
    std::cout << "Please provide filename in option" << std::endl;
    std::cout << "Will load auto wcsim.root in WCSIMDIR ..." << std::endl;
    char* name = "wcsim.root";
    strncpy(fTest, wcsimdirenv, sizeof(fTest));
    strncat(fTest, "/", (sizeof(fTest) - strlen(fTest)) );
    strncat(fTest, name, (sizeof(fTest) - strlen(fTest)) );
    f = new TFile(fTest);
  }else{
    f = new TFile(filename);
  }
  if (!f->IsOpen()){
    cout << "Error, could not open input file: " << filename << endl;
    return -1;
  }else{
    if (filename==NULL) cout << "File open bro: " << fTest << endl;
    else cout << "File open bro: " << filename << endl;
  }




  //**************  Loading the tree  ************************************




  TTree  *wcsimT = (TTree*)f->Get("wcsimT");

  WCSimRootEvent *wcsimrootsuperevent = new WCSimRootEvent();
  wcsimT->SetBranchAddress("wcsimrootevent_OD",&wcsimrootsuperevent);


  TTree *wcsimGeoT = (TTree*)f->Get("wcsimGeoT");

  WCSimRootGeom *wcsimrootgeom = new WCSimRootGeom();
  wcsimGeoT->SetBranchAddress("wcsimrootgeom",&wcsimrootgeom);
  wcsimGeoT->GetEntry(0); //Geometry is the same for all events, so can just use GetEntry(0)


  
  const long unsigned int nEntries = wcsimT->GetEntries();
  cout << "Nb of entries " << wcsimT->GetEntries() << endl;
  



  //*******************  Histograms definition  ***************************************



  const int nBins = 25;
  const int xMin = -3600;
  const int xMax = 3600;  //Radius of HyperK is 3551
  const int zMin = -3000;
  const int zMax = 3000; //Length of HyperK is 5597
  


 



 TCanvas *c1;

  
   c1 = new TCanvas("c1","c1", 1200,600);
   c1->Divide(2,2);
   /*   c2 = new TCanvas("c2","c2", 1200,600);
   c2->Divide(2,2);
   c3 = new TCanvas("c3","c3", 1200,600);
   c3->Divide(2,2);
   c4 = new TCanvas("c4","c4", 1200,600);
   c4->Divide(2,2);
   c5 = new TCanvas("c5","c5", 1200,600);
   c5->Divide(2,2);
   c6 = new TCanvas("c6","c6", 1200,600);
   c6->Divide(2,2);
   c7 = new TCanvas("c7","c7", 1200,600);
   c7->Divide(2,2);
   c8 = new TCanvas("c8","c8", 1200,600);
   c8->Divide(2,2);
   c9 = new TCanvas("c9","c9", 1200,600);
   c9->Divide(2,2);
   c10 = new TCanvas("c10","c10", 1200,600);
   c10->Divide(2,2);
   */

   //*******************  Filling histograms  **********************************

   

   
   for(long unsigned int iEntry = 0; iEntry <= nEntries; iEntry++){
      wcsimT->GetEvent(iEntry); 
     // Point to event iEntry inside WCSimTree


       TNtuple *ntuple = new TNtuple("ntuple","x y z charge ntuple","pmtX:pmtY:pmtZ:charge"); 
       ntuple->SetMarkerStyle(21);


       
       const long unsigned int nTriggers = wcsimrootsuperevent->GetNumberOfEvents();
       const long unsigned int nSubTriggers = wcsimrootsuperevent->GetNumberOfSubEvents();
      
       std::cout<< "Reading event " << iEntry <<std::endl;

       for(long unsigned int iTrig = 0; iTrig < nTriggers; iTrig++){
	 WCSimRootTrigger *wcsimroottrigger = wcsimrootsuperevent->GetTrigger(iTrig);
	 int ncherenkovdigihits = wcsimroottrigger->GetNcherenkovdigihits();
	 
	 for (int i=0; i<ncherenkovdigihits; i++){
	   WCSimRootCherenkovDigiHit *hit = (WCSimRootCherenkovDigiHit*)
	     (wcsimroottrigger->GetCherenkovDigiHits()->At(i));


	   int tubeID = hit->GetTubeId();
	   WCSimRootPMT pmt = wcsimrootgeom->GetPMT(tubeID);
	   Double_t pmtX = pmt.GetPosition(0);
	   Double_t  pmtY = pmt.GetPosition(1);
	   Double_t pmtZ = pmt.GetPosition(2);

	   Double_t charge = hit->GetQ();
	


	   
	   ntuple->Fill(pmtX,pmtY,pmtZ,charge);
	   
	   
	   
	   
	 }

       }
      

       string canvasnumber(int n){
	 int n1 = n+1;
	 string c;
	 return "c"+ std::to_string(n1) ;
}
      

       
       canvasnumber(iEntry)->cd(iEntry+1);
      ntuple->Draw("pmtZ:pmtX:pmtY");
      
   }





   //******************  Drawing histogram  *********************************

   //  ntuple->Print();   to check if data entries correct



  


   
   

   //ntuple->Draw("pmtZ:pmtX:pmtY:charge", "", "COLZ");

   /* ntuple->Draw("pmtZ:pmtX:pmtY");

   c1->cd(2);
   ntuple->Draw("charge:pmtZ");
   c1->cd(3);
   ntuple->Draw("charge:pmtX");
   c1->cd(4);
    ntuple->Draw("charge:pmtY");

  
   
   */




//TH3D* xy = new TH3D("ntuple","NTuple",nBins,xMin,xMax,nBins,zMin,zMax );
   //ntuple->Project("ntuple","x:y:charge");
   
   // hit3D->Draw("BOX2 ");
 
   
   // makes the plot very small

   //TGeoTube *myCy1 = new TGeoTube(0,3551,2798.5);
   //myCy1->Draw("SAME ");


  
  

}
